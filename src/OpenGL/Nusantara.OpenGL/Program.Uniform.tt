// <https://github.com/YvvkiRika> wrote this file.
// As long as you retain this notice, you can do whatever you want with this stuff.

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#
void Uniform(string type)
{
	Uniform1(type);
	UniformMore1(type, 2);
	UniformMore1(type, 3);
	UniformMore1(type, 4);
}

void Uniform1(string type)
{
#>
	public void Uniform1(int location, <#= type #> v0)
	{
		ThrowIfDisposed();

		GL.ProgramUniform1(Handle, location, v0);
	}

	public void Uniform1(string name, <#= type #> v0)
	{
		int location = GetUniformLocationUnsafeChecked(name);

		Uniform1(location, v0);
	}

	public bool TryUniform1(string name, <#= type #> v0)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			return false;
		}

		Uniform1(location, v0);
		return true;
	}

	public unsafe void Uniform1(int location, Span<<#= type #>> value)
	{
		ThrowIfDisposed();

		fixed (<#= type #>* value_ptr = value)
		{
			GL.ProgramUniform1(
				Handle,
				location,
				(uint)value.Length,
				value_ptr);
		}
	}

	public unsafe void Uniform1(string name, Span<<#= type #>> value)
	{
		int location = GetUniformLocationUnsafeChecked(name);

		Uniform1(location, value);
	}

	public unsafe bool TryUniform1(string name, Span<<#= type #>> value)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			return false;
		}

		Uniform1(location, value);
		return true;
	}

	public unsafe void Uniform1(int location, params <#= type #>[] value)
	{
		Uniform1(location, value.AsSpan());
	}

	public unsafe void Uniform1(string name, params <#= type #>[] value)
	{
		int location = GetUniformLocationUnsafeChecked(name);

		Uniform1(location, value);
	}

	public unsafe bool TryUniform1(string name, params <#= type #>[] value)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			return false;
		}

		Uniform1(location, value);
		return true;
	}

	[EditorBrowsable(EditorBrowsableState.Never)]
	public unsafe void Uniform1(int location, params ValueTuple<<#= type #>>[] value)
	{
		ThrowIfDisposed();

		fixed (ValueTuple<<#= type #>>* value_ptr = value)
		{
			GL.ProgramUniform1(
				Handle,
				location,
				(uint)value.Length,
				(float*)value_ptr);
		}
	}

	[EditorBrowsable(EditorBrowsableState.Never)]
	public unsafe void Uniform1(string name, params ValueTuple<<#= type #>>[] value)
	{
		int location = GetUniformLocationUnsafeChecked(name);

		Uniform1(location, value);
	}

	[EditorBrowsable(EditorBrowsableState.Never)]
	public unsafe bool TryUniform1(string name, params ValueTuple<<#= type #>>[] value)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			return false;
		}

		Uniform1(location, value);
		return true;
	}

<#
}

char[] _symbols = { 'X', 'Y', 'Z', 'W' };
char[] GetSymbols(char[] symbols, int index, int count)
{
	char[] result = new char[count];
	Array.Copy(symbols, index, result, 0, count);

	return result;
}

void UniformMore1(string type, int count)
{
	string[] typeArr = new string[count];
	for (int i = 0; i < count; i++)
	{
		typeArr[i] = type;
	}
#>
	public void Uniform<#= count #>(int location, <#= string.Join(", ", Enumerable.Range(0, count).Select(index => $"{type} v{index}")) #>)
	{
		ThrowIfDisposed();

		GL.ProgramUniform<#= count #>(Handle, location, <#= string.Join(", ", Enumerable.Range(0, count).Select(index => $"v{index}")) #>);
	}

	public void Uniform<#= count #>(string name, <#= string.Join(", ", Enumerable.Range(0, count).Select(index => $"{type} v{index}")) #>)
	{
		int location = GetUniformLocationUnsafeChecked(name);

		Uniform<#= count #>(location, <#= string.Join(", ", Enumerable.Range(0, count).Select(index => $"v{index}")) #>);
	}

	public bool TryUniform<#= count #>(string name, <#= string.Join(", ", Enumerable.Range(0, count).Select(index => $"{type} v{index}")) #>)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			return false;
		}

		Uniform<#= count #>(location, <#= string.Join(", ", Enumerable.Range(0, count).Select(index => $"v{index}")) #>);
		return true;
	}

	public unsafe void Uniform<#= count #>(int location, Span<ValueTuple<<#= string.Join(", ", typeArr) #>>> value)
	{
		ThrowIfDisposed();

		fixed (ValueTuple<<#= string.Join(", ", typeArr) #>>* value_ptr = value)
		{
			GL.ProgramUniform<#= count #>(
				Handle,
				location,
				(uint)value.Length,
				(<#= type #>*)value_ptr);
		}
	}

	public void Uniform<#= count #>(string name, Span<ValueTuple<<#= string.Join(", ", typeArr) #>>> value)
	{
		int location = GetUniformLocationUnsafeChecked(name);

		Uniform<#= count #>(location, value);
	}

	public bool TryUniform<#= count #>(string name, Span<ValueTuple<<#= string.Join(", ", typeArr) #>>> value)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			return false;
		}

		Uniform<#= count #>(location, value);
		return true;
	}

	public unsafe void Uniform<#= count #>(int location, params ValueTuple<<#= string.Join(", ", typeArr) #>>[] value)
	{
		Uniform<#= count #>(location, value.AsSpan());
	}

	public void Uniform<#= count #>(string name, params ValueTuple<<#= string.Join(", ", typeArr) #>>[] value)
	{
		int location = GetUniformLocationUnsafeChecked(name);

		Uniform<#= count #>(location, value);
	}

	public bool TryUniform<#= count #>(string name, params ValueTuple<<#= string.Join(", ", typeArr) #>>[] value)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			return false;
		}

		Uniform<#= count #>(location, value);
		return true;
	}

<#
	UniformVector(count, type, $"Vector{count}D<{type}>");
}

void UniformVector(int count, string type, string vectorName)
{
#>
	public unsafe void Uniform<#= count #>(int location, <#= vectorName #> vector)
	{
		Uniform<#= count #>(
			location,
			<#= string.Join(@",
			", GetSymbols(_symbols, 0, count).Select(symbol => $"vector.{symbol}"))#>);
	}

	public unsafe void Uniform<#= count #>(string name, <#= vectorName #> vector)
	{
		Uniform<#= count #>(
			name,
			<#= string.Join(@",
			", GetSymbols(_symbols, 0, count).Select(symbol => $"vector.{symbol}"))#>);
	}

	public bool TryUniform<#= count #>(string name, <#= vectorName #> vector)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			return false;
		}

		Uniform<#= count #>(location, vector);
		return true;
	}

	public unsafe void Uniform<#= count #>(int location, Span<<#= vectorName #>> value)
	{
		ThrowIfDisposed();

		fixed (<#= vectorName #>* value_ptr = value)
		{
			GL.ProgramUniform<#= count #>(
				Handle,
				location,
				(uint)value.Length,
				(<#= type #>*)value_ptr);
		}
	}

	public unsafe void Uniform<#= count #>(string name, Span<<#= vectorName #>> value)
	{
		int location = GetUniformLocationUnsafeChecked(name);

		Uniform<#= count #>(location, value);
	}

	public bool TryUniform<#= count #>(string name, Span<<#= vectorName #>> value)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			return false;
		}

		Uniform<#= count #>(location, value);
		return true;
	}

	public unsafe void Uniform<#= count #>(int location, params <#= vectorName #>[] value)
	{
		Uniform<#= count #>(location, value.AsSpan());
	}

	public unsafe void Uniform<#= count #>(string name, params <#= vectorName #>[] value)
	{
		int location = GetUniformLocationUnsafeChecked(name);

		Uniform<#= count #>(location, value);
	}

	public bool TryUniform<#= count #>(string name, params <#= vectorName #>[] value)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			return false;
		}

		Uniform<#= count #>(location, value);
		return true;
	}

<#
}

void UniformMatrix(string type)
{
	UniformMatrixD(type, $"Matrix2X2<{type}>", "2");
	UniformMatrixD(type, $"Matrix2X3<{type}>", "2x3");
	UniformMatrixD(type, $"Matrix2X4<{type}>", "2x4");

	UniformMatrixD(type, $"Matrix3X2<{type}>", "3x2");
	UniformMatrixD(type, $"Matrix3X3<{type}>", "3");
	UniformMatrixD(type, $"Matrix3X4<{type}>", "3x4");

	UniformMatrixD(type, $"Matrix4X2<{type}>", "4x2");
	UniformMatrixD(type, $"Matrix4X3<{type}>", "4x3");
	UniformMatrixD(type, $"Matrix4X4<{type}>", "4");
}

void UniformMatrixD(string type, string matrixType, string glMatrixDimension)
{
#>
	public unsafe void UniformMatrix<#= glMatrixDimension #>(int location, bool transpose, Span<<#= matrixType #>> value)
	{
		ThrowIfDisposed();

		fixed (<#= matrixType #>* value_ptr = value)
		{
			GL.ProgramUniformMatrix<#= glMatrixDimension #>(
				Handle,
				location,
				(uint)value.Length,
				transpose,
				(<#= type #>*)value_ptr);
		}
	}

	public unsafe void UniformMatrix<#= glMatrixDimension #>(string name, bool transpose, Span<<#= matrixType #>> value)
	{
		int location = GetUniformLocationUnsafeChecked(name);

		UniformMatrix<#= glMatrixDimension #>(location, transpose, value);
	}

	public bool TryUniformMatrix<#= glMatrixDimension #>(string name, bool transpose, Span<<#= matrixType #>> value)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			return false;
		}

		UniformMatrix<#= glMatrixDimension #>(location, transpose, value);
		return true;
	}

	public unsafe void UniformMatrix<#= glMatrixDimension #>(int location, bool transpose = false, params <#= matrixType #>[] value)
	{
		UniformMatrix<#= glMatrixDimension #>(location, transpose, value.AsSpan());
	}

	public unsafe void UniformMatrix<#= glMatrixDimension #>(string name, bool transpose = false, params <#= matrixType #>[] value)
	{
		int location = GetUniformLocationUnsafeChecked(name);

		UniformMatrix<#= glMatrixDimension #>(location, transpose, value);
	}

	public bool TryUniformMatrix<#= glMatrixDimension #>(string name, bool transpose = false, params <#= matrixType #>[] value)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			return false;
		}

		UniformMatrix<#= glMatrixDimension #>(location, transpose, value);
		return true;
	}

<#
}
#>
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Numerics;

using Silk.NET.Maths;
using Silk.NET.OpenGL;

namespace Nusantara.OpenGL;

public partial class Program
{
	private int GetUniformLocationUnsafeChecked(string name)
	{
		int location = GetUniformLocationUnsafe(name);
		if (location is < 0)
		{
			ThrowKeyNotFoundException();
		}

		[DoesNotReturn]
		static void ThrowKeyNotFoundException()
		{
			throw new KeyNotFoundException();
		}

		return location;
	}

<#
	Uniform("int");
	Uniform("uint");
	Uniform("float");
	UniformVector(2, "float", "Vector2");
	UniformVector(3, "float", "Vector3");
	UniformVector(4, "float", "Vector4");
	Uniform("double");

	UniformMatrix("float");
	UniformMatrix("double");
	UniformMatrixD("float", "Matrix3x2", "3x2");
	UniformMatrixD("float", "Matrix4x4", "4");
#>
}